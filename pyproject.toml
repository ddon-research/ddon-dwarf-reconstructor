[project]
name = "ddon-dwarf-reconstructor"
version = "0.1.0"
description = "Reconstructs C/C++ header structures from DWARF debug symbols in PS4 ELF files"
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.13"
dependencies = [
    "pyelftools>=0.31",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
]
authors = [
    { name = "ddon-dwarf-reconstructor contributors", email = "contributors@example.com" }
]
maintainers = [
    { name = "ddon-dwarf-reconstructor contributors", email = "contributors@example.com" }
]
license = "GPL-3.0-or-later"
keywords = [
    "dwarf", 
    "elf", 
    "debug-symbols", 
    "reverse-engineering", 
    "ps4", 
    "c++", 
    "header-reconstruction",
    "binary-analysis"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Disassemblers",
    "Topic :: System :: Software Distribution",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Environment :: Console",
]

[project.urls]
"Source Code" = "https://github.com/your-username/ddon-dwarf-reconstructor"
"Bug Tracker" = "https://github.com/your-username/ddon-dwarf-reconstructor/issues"
Documentation = "https://github.com/your-username/ddon-dwarf-reconstructor/tree/main/docs"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-timeout>=2.1",
    "pytest-mock>=3.10",
    "pytest-html>=3.1.0",
    "mypy>=1.0",
    "ruff>=0.1.0",
]
test = [
    "pytest>=7.0",
    "pytest-mock>=3.10",
]

[project.scripts]
ddon-dwarf-reconstructor = "ddon_dwarf_reconstructor.main:main"

[build-system]
requires = ["hatchling>=1.26"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/ddon_dwarf_reconstructor"]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "*/__init__.py",
    "src/ddon_dwarf_reconstructor/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--maxfail=1",
    "--disable-warnings",
    "-q",
    "--tb=short", 
    "--strict-markers",
    "--color=yes",
    "--cov=src/ddon_dwarf_reconstructor",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--cov-report=html:htmlcov",
    "--junit-xml=test-results.xml",
    "--cov-branch",
    "--cov-fail-under=30",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "performance: marks tests as performance benchmarks",
]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(levelname)s: %(message)s"

[tool.mypy]
python_version = "3.13"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = "^tests/"
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "elftools.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
ignore_errors = true

[tool.ruff]
line-length = 100
target-version = "py313"
fix = true
exclude = [
    "build",
    "dist", 
    ".venv",
    "__pycache__",
    "src/**/migrations",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "B", "UP", "SIM"]
ignore = [
    "C901",    # function too complex (allow complex functions for now)
    "UP047",   # use type parameters (Python 3.13 specific)
    "E501",    # line too long (handled by formatter, allow long docstrings/debug statements)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "E501",    # line too long (tests can be more verbose)
    "PLR2004", # magic values in tests are OK
]

[dependency-groups]
dev = [
    "nuitka>=2.7.16",
]
